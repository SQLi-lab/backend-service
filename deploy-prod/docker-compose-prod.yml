version: "3.8"

services:
  qsli_lab:
    image: sqli-lab-backend:latest
    restart: always
    container_name: sqli_lab
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    ports:
      - "8000:8000" # TODO: убрать порт, точка входа - nginx
    depends_on:
      migrator:
        condition: service_completed_successfully
    env_file:
      - .env

  migrator:
    image: sqli-lab-backend-migrator:latest
    container_name: migrator
    restart: "no"
    command: [ "python", "manage.py", "migrate" ]
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env

  deploy-service:
    image: sqli-lab-deploy-service:latest
    container_name: deploy-service
    restart: always
    command: python3 main.py
    depends_on:
      - dramatiq
    env_file:
      - .env

  deploy-service-worker:
    image: sqli-lab-deploy-service-worker:latest
    container_name: deploy-service-worker
    restart: always
    command: dramatiq api.tasks --processes 4 --skip-logging
    depends_on:
      - redis
    env_file:
      - .env

  watcher:
    image: sqli-lab-watcher:latest
    container_name: watcher
    restart: always
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    env_file:
      - .env
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d sqli_lab -U sqli_user"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s
    volumes:
      - pg_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    restart: always
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

# TODO: доделать чтобы все ждали мигратор

# TODO: nginx container

volumes:
  pg_data: